//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include <wx/wx.h>

#include "wxcrafter.h"


// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;


MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    SetBackgroundColour(wxColour(* wxWHITE)); 

    // Create top-level grid sizer
    wxGridSizer *grid_sizer = new wxGridSizer(3, 1, 2, 2);
    SetSizer(grid_sizer);

    // , wxTE_MULTILINE|wxTE_READONLY

    // wxSize cell_size = ConvertDialogToPixels(wxSize(60,4));
    // wxSize cell_size = ConvertDialogToPixels(wxSize(1,1));
    wxSize font_size = GetFont().GetPixelSize();
    wxSize cell_size(60*font_size.x, 4*font_size.y);

    // std::cerr << "CELL " << cell_size.x << "," << cell_size.y << std::endl;

    wxTextCtrl *cell1 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, cell_size, wxTE_MULTILINE|wxTE_READONLY);
    // grid_sizer->Add(cell1, wxSizerFlags().Align(wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL).Border(wxALL, 4));
    grid_sizer->Add(cell1, 1, wxALL|wxEXPAND|wxRESERVE_SPACE_EVEN_IF_HIDDEN, 3);

    wxTextCtrl *cell2 = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, cell_size, wxTE_MULTILINE|wxTE_READONLY);
    // grid_sizer->Add(cell2, wxSizerFlags().Align(wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL).Border(wxALL, 4));
    grid_sizer->Add(cell2, 1, wxALL|wxEXPAND|wxRESERVE_SPACE_EVEN_IF_HIDDEN, 3);

    m_MainText = new wxTextCtrl(this, wxID_MainText, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_MULTILINE|wxTE_READONLY);

    grid_sizer->Add(m_MainText, 1, wxALL|wxEXPAND|wxRESERVE_SPACE_EVEN_IF_HIDDEN, 3);

    grid_sizer->Fit(this);

    // cell1->SetBackgroundColour(wxColour(* wxLIGHT_GREY)); 
    cell1->SetForegroundColour(wxColour(* wxBLUE)); 

//     wxBoxSizer* boxSizer1 = new wxBoxSizer(wxVERTICAL);
//     this->SetSizer(boxSizer1);
//     
//     m_MainText = new wxTextCtrl(this, wxID_MainText, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_MULTILINE|wxVSCROLL);
//     
//     boxSizer1->Add(m_MainText, 1, wxALL|wxEXPAND|wxRESERVE_SPACE_EVEN_IF_HIDDEN, 5);
    
    m_menuBar = new wxMenuBar(0);
    this->SetMenuBar(m_menuBar);
    
    m_menu_File = new wxMenu();
    m_menuBar->Append(m_menu_File, _("File"));
    
    m_menuItem_Exit = new wxMenuItem(m_menu_File, wxID_EXIT, _("Exit\tAlt-X"), _("Quit"), wxITEM_NORMAL);
    m_menu_File->Append(m_menuItem_Exit);
    
    m_menu_Test = new wxMenu();
    m_menuBar->Append(m_menu_Test, _("Test"));
    
    m_menuItem_Test1 = new wxMenuItem(m_menu_Test, wxID_TEST1, _("Test1"), wxT(""), wxITEM_NORMAL);
    m_menu_Test->Append(m_menuItem_Test1);
    
    m_menu_Help = new wxMenu();
    m_menuBar->Append(m_menu_Help, _("Help"));
    
    m_menuItem_About = new wxMenuItem(m_menu_Help, wxID_ABOUT, _("About..."), wxT(""), wxITEM_NORMAL);
    m_menu_Help->Append(m_menuItem_About);
    
    m_mainToolbar = this->CreateToolBar(wxTB_FLAT, wxID_ANY);
    m_mainToolbar->SetToolBitmapSize(wxSize(16,16));
    
    SetName(wxT("MainFrameBaseClass"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    this->Connect(m_menuItem_Exit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Connect(m_menuItem_Test1->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnTest1), NULL, this);
    this->Connect(m_menuItem_About->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    this->Disconnect(m_menuItem_Exit->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnExit), NULL, this);
    this->Disconnect(m_menuItem_Test1->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnTest1), NULL, this);
    this->Disconnect(m_menuItem_About->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MainFrameBaseClass::OnAbout), NULL, this);
    
}
